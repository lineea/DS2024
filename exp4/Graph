#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <algorithm>
#include <functional> // 用于 std::function
using namespace std;

// 图的数据结构
class Graph {
public:
    int vertices;
    vector<vector<pair<int, int>>> adjList; // 邻接表: 节点和权重

    Graph(int v) {
        vertices = v;
        adjList.resize(v);
    }

    void addEdge(int u, int v, int weight = 1) {
        adjList[u].push_back({v, weight});
        adjList[v].push_back({u, weight}); // 无向图
    }

    // BFS 算法
    void BFS(int start) {
        vector<bool> visited(vertices, false);
        queue<int> q;
        visited[start] = true;
        q.push(start);

        cout << "BFS 遍历结果: ";
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            cout << node << " ";
            for (auto neighbor : adjList[node]) {
                if (!visited[neighbor.first]) {
                    visited[neighbor.first] = true;
                    q.push(neighbor.first);
                }
            }
        }
        cout << endl;
    }

    // DFS 算法
    void DFSUtil(int node, vector<bool> &visited) {
        visited[node] = true;
        cout << node << " ";
        for (auto neighbor : adjList[node]) {
            if (!visited[neighbor.first]) {
                DFSUtil(neighbor.first, visited);
            }
        }
    }

    void DFS(int start) {
        vector<bool> visited(vertices, false);
        cout << "DFS 遍历结果: ";
        DFSUtil(start, visited);
        cout << endl;
    }

    // Dijkstra 最短路径算法
    void dijkstra(int start) {
        vector<int> dist(vertices, INT_MAX);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        dist[start] = 0;
        pq.push({0, start});

        while (!pq.empty()) {
            int current = pq.top().second;
            int currentDist = pq.top().first;
            pq.pop();

            for (auto neighbor : adjList[current]) {
                int next = neighbor.first;
                int weight = neighbor.second;

                if (currentDist + weight < dist[next]) {
                    dist[next] = currentDist + weight;
                    pq.push({dist[next], next});
                }
            }
        }

        cout << "从节点 " << start << " 出发的最短路径: ";
        for (int i = 0; i < vertices; i++) {
            cout << "节点 " << i << " -> " << dist[i] << "; ";
        }
        cout << endl;
    }

    // Kruskal 最小生成树算法
    void kruskal() {
        vector<pair<int, pair<int, int>>> edges;
        for (int i = 0; i < vertices; i++) {
            for (auto neighbor : adjList[i]) {
                edges.push_back({neighbor.second, {i, neighbor.first}});
            }
        }
        sort(edges.begin(), edges.end());

        // 并查集
        vector<int> parent(vertices);
        for (int i = 0; i < vertices; i++) parent[i] = i;

        function<int(int)> find = [&](int node) {
            if (parent[node] != node)
                parent[node] = find(parent[node]);
            return parent[node];
        };

        auto unionSet = [&](int u, int v) {
            int rootU = find(u);
            int rootV = find(v);
            if (rootU != rootV) parent[rootU] = rootV;
        };

        cout << "最小生成树的边: ";
        int mstWeight = 0;
        for (auto edge : edges) {
            int weight = edge.first;
            int u = edge.second.first;
            int v = edge.second.second;

            if (find(u) != find(v)) {
                mstWeight += weight;
                unionSet(u, v);
                cout << "(" << u << ", " << v << ", 权重: " << weight << ") ";
            }
        }
        cout << "\n最小生成树的总权重: " << mstWeight << endl;
    }
};

int main() {
    Graph g(6);

    g.addEdge(0, 1, 4);
    g.addEdge(0, 2, 3);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 2);
    g.addEdge(2, 3, 4);
    g.addEdge(3, 4, 2);
    g.addEdge(4, 5, 6);

    cout << "创建图" << endl;

    g.BFS(0); // 测试 BFS
    g.DFS(0); // 测试 DFS

    g.dijkstra(0); // 测试最短路径算法

    g.kruskal(); // 测试最小生成树算法

    return 0;
}

